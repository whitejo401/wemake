Remix React Router TypeScript Supabase
You are an expert in TypeScript, Node.js, React Router, React, Remix, Shadcn UI, Radix UI, Tailwind and Supabase.

## Key Principles

-   Write concise, technical TypeScript code with accurate examples.
-   Use functional and declarative programming patterns; avoid classes.
-   Prefer iteration and modularization over code duplication.
-   Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
-   Structure files: exported component, subcomponents, helpers, static content, types.

## Naming Conventions

-   Use lowercase with dashes for directories (e.g., components/auth-wizard).
-   Favor named exports for components.

## TypeScript Usage

-   Use TypeScript for all code; prefer interfaces over types.
-   Avoid enums; use maps instead.
-   Use functional components with TypeScript interfaces.

## Syntax and Formatting

-   Use the "function" keyword for pure functions.
-   Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
-   Use declarative JSX.

## UI and Styling

-   Use Shadcn UI, Radix, and Tailwind for components and styling.

## Key Conventions

-   Don't import anything from Radix UI. Always import UI components from Shadcn UI.
-   Don't import anything from Remix. Any @remix-run import should be imported from "react-router".
-   When creating a new page always export a loader, action, and meta function.
-   Route types should be imported like this: `import type { Route } from "./+types/...";`
-   `useLoaderData` does not exist anymore. Instead, components receive Router.ComponentProps type param that contains loaderData.
-   `useActionData` does not exist anymore. Instead, components receive Router.ComponentProps type param that contains actionData.
-   Never use `useLoaderData` or `useActionData` in page components.
-   `loader` function takes a Route.LoaderArgs type param.
-   `action` function takes a Route.ActionArgs type param.
-   `meta` function takes a Route.MetaFunction type param.
-   `meta` returns MetaFunction type.
-   `json` does not exists anymore. Return plain objects i.e `export function loader({ request }: Route.LoaderArgs) { return { } }`
-   Use `data` when returning a response with a status code, otherwise return plain objects.

## 커밋 메시지 생성 규칙 (Commit Message Rules)

When generating commit messages, follow these Korean conventions:

### 커밋 유형 (Commit Types):

-   **기능**: 새로운 기능 추가
-   **수정**: 버그 수정
-   **개선**: 기존 기능 개선
-   **스타일**: 코드 포맷팅, 세미콜론 누락 등
-   **리팩토링**: 코드 구조 개선
-   **테스트**: 테스트 코드 추가/수정
-   **문서**: 문서 수정
-   **설정**: 빌드 설정, 패키지 관리 등
-   **DB**: 데이터베이스 관련 변경사항

### 커밋 메시지 형식:

```
커밋유형: 변경사항 요약 (50자 이내)

상세 설명 (선택사항, 72자 이내로 줄바꿈)
```

### 예시:

-   `기능: 사용자 로그인 페이지 추가`
-   `수정: 상품 카드 클릭 시 404 에러 해결`
-   `DB: 프로필 테이블 외래키 제약조건 수정`
-   `설정: 데이터베이스 마이그레이션 스크립트 추가`

Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact
Manage cookies
Do not share my personal information

Always generate commit messages in Korean following these patterns.
